/*
 * react-twoo
 * undefined
 * https://github.com/aarondupon/react-twoo
 * v0.1.0
 * undefined License
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _commonjsHelpers = require('../../../../_virtual/_commonjsHelpers.js');
var index$1 = require('../core/index.js');
var index = require('../../../resource-loader/lib/index.js');
var url = require('url');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var url__default = /*#__PURE__*/_interopDefaultLegacy(url);

var spritesheetParser = _commonjsHelpers.createCommonjsModule(function (module, exports) {

exports.__esModule = true;

exports["default"] = function () {
  return function spritesheetParser(resource, next) {
    var imageResourceName = resource.name + '_image'; // skip if no data, its not json, it isn't spritesheet data, or the image resource already exists

    if (!resource.data || resource.type !== index['default'].Resource.TYPE.JSON || !resource.data.frames || this.resources[imageResourceName]) {
      next();
      return;
    }

    var loadOptions = {
      crossOrigin: resource.crossOrigin,
      loadType: index['default'].Resource.LOAD_TYPE.IMAGE,
      metadata: resource.metadata.imageMetadata,
      parentResource: resource
    };
    var resourcePath = getResourcePath(resource, this.baseUrl); // load the image for this sheet

    this.add(imageResourceName, resourcePath, loadOptions, function onImageLoad(res) {
      var spritesheet = new index$1.__moduleExports.Spritesheet(res.texture.baseTexture, resource.data, resource.url);
      spritesheet.parse(function () {
        resource.spritesheet = spritesheet;
        resource.textures = spritesheet.textures;
        next();
      });
    });
  };
};

exports.getResourcePath = getResourcePath;





var _url2 = _interopRequireDefault(url__default['default']);



function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function getResourcePath(resource, baseUrl) {
  // Prepend url path unless the resource image is a data url
  if (resource.isDataUrl) {
    return resource.data.meta.image;
  }

  return _url2["default"].resolve(resource.url.replace(baseUrl, ''), resource.data.meta.image);
}
});

_commonjsHelpers.unwrapExports(spritesheetParser);
var spritesheetParser_1 = spritesheetParser.getResourcePath;

exports.__moduleExports = spritesheetParser;
exports.getResourcePath = spritesheetParser_1;
