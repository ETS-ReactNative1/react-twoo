/*
 * react-twoo
 * undefined
 * https://github.com/aarondupon/react-twoo
 * v0.1.0
 * undefined License
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _commonjsHelpers = require('../../../../_virtual/_commonjsHelpers.js');
var Application = require('../core/Application.js');
var index = require('../../../resource-loader/lib/index.js');
var bitmapFontParser = require('./bitmapFontParser.js');
var spritesheetParser = require('./spritesheetParser.js');
var textureParser = require('./textureParser.js');
var loader = require('./loader.js');

var loaders = _commonjsHelpers.createCommonjsModule(function (module, exports) {

exports.__esModule = true;
exports.shared = exports.Resource = exports.textureParser = exports.getResourcePath = exports.spritesheetParser = exports.parseBitmapFontData = exports.bitmapFontParser = exports.Loader = undefined;



Object.defineProperty(exports, 'bitmapFontParser', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(bitmapFontParser.__moduleExports)["default"];
  }
});
Object.defineProperty(exports, 'parseBitmapFontData', {
  enumerable: true,
  get: function get() {
    return bitmapFontParser.__moduleExports.parse;
  }
});



Object.defineProperty(exports, 'spritesheetParser', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(spritesheetParser.__moduleExports)["default"];
  }
});
Object.defineProperty(exports, 'getResourcePath', {
  enumerable: true,
  get: function get() {
    return spritesheetParser.__moduleExports.getResourcePath;
  }
});



Object.defineProperty(exports, 'textureParser', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(textureParser.__moduleExports)["default"];
  }
});



Object.defineProperty(exports, 'Resource', {
  enumerable: true,
  get: function get() {
    return index['default'].Resource;
  }
});



var _Application2 = _interopRequireDefault(Application.__moduleExports);



var _loader2 = _interopRequireDefault(loader);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}
/**
 * This namespace contains APIs which extends the {@link https://github.com/englercj/resource-loader resource-loader} module
 * for loading assets, data, and other resources dynamically.
 * @example
 * const loader = new PIXI.loaders.Loader();
 * loader.add('bunny', 'data/bunny.png')
 *       .add('spaceship', 'assets/spritesheet.json');
 * loader.load((loader, resources) => {
 *    // resources.bunny
 *    // resources.spaceship
 * });
 * @namespace PIXI.loaders
 */


exports.Loader = _loader2["default"];
/**
 * A premade instance of the loader that can be used to load resources.
 * @name shared
 * @memberof PIXI.loaders
 * @type {PIXI.loaders.Loader}
 */

var shared = new _loader2["default"]();

shared.destroy = function () {// protect destroying shared loader
};

exports.shared = shared; // Mixin the loader construction

var AppPrototype = _Application2["default"].prototype;
AppPrototype._loader = null;
/**
 * Loader instance to help with asset loading.
 * @name PIXI.Application#loader
 * @type {PIXI.loaders.Loader}
 */

Object.defineProperty(AppPrototype, 'loader', {
  get: function get() {
    if (!this._loader) {
      var sharedLoader = this._options.sharedLoader;
      this._loader = sharedLoader ? shared : new _loader2["default"]();
    }

    return this._loader;
  }
}); // Override the destroy function
// making sure to destroy the current Loader

AppPrototype._parentDestroy = AppPrototype.destroy;

AppPrototype.destroy = function destroy(removeView) {
  if (this._loader) {
    this._loader.destroy();

    this._loader = null;
  }

  this._parentDestroy(removeView);
};
});

_commonjsHelpers.unwrapExports(loaders);
var loaders_1 = loaders.shared;
var loaders_2 = loaders.Resource;
var loaders_3 = loaders.textureParser;
var loaders_4 = loaders.getResourcePath;
var loaders_5 = loaders.spritesheetParser;
var loaders_6 = loaders.parseBitmapFontData;
var loaders_7 = loaders.bitmapFontParser;
var loaders_8 = loaders.Loader;

exports.Loader = loaders_8;
exports.Resource = loaders_2;
exports.__moduleExports = loaders;
exports.bitmapFontParser = loaders_7;
exports.getResourcePath = loaders_4;
exports.parseBitmapFontData = loaders_6;
exports.shared = loaders_1;
exports.spritesheetParser = loaders_5;
exports.textureParser = loaders_3;
