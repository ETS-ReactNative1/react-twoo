/*
 * react-twoo
 * undefined
 * https://github.com/aarondupon/react-twoo
 * v0.1.0
 * undefined License
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var compileProgram = require('./shader/compileProgram.js');
var extractAttributes = require('./shader/extractAttributes.js');
var extractUniforms = require('./shader/extractUniforms.js');
var setPrecision = require('./shader/setPrecision.js');
var generateUniformAccessObject = require('./shader/generateUniformAccessObject.js');

/**
 * Helper class to create a webGL Shader
 *
 * @class
 * @memberof PIXI.glCore
 * @param gl {WebGLRenderingContext}
 * @param vertexSrc {string|string[]} The vertex shader source as an array of strings.
 * @param fragmentSrc {string|string[]} The fragment shader source as an array of strings.
 * @param precision {precision]} The float precision of the shader. Options are 'lowp', 'mediump' or 'highp'.
 * @param attributeLocations {object} A key value pair showing which location eact attribute should sit eg {position:0, uvs:1}
 */


var Shader = function Shader(gl, vertexSrc, fragmentSrc, precision, attributeLocations) {
  /**
   * The current WebGL rendering context
   *
   * @member {WebGLRenderingContext}
   */
  this.gl = gl;

  if (precision) {
    vertexSrc = setPrecision['default'](vertexSrc, precision);
    fragmentSrc = setPrecision['default'](fragmentSrc, precision);
  }
  /**
   * The shader program
   *
   * @member {WebGLProgram}
   */
  // First compile the program..


  this.program = compileProgram['default'](gl, vertexSrc, fragmentSrc, attributeLocations);
  /**
   * The attributes of the shader as an object containing the following properties
   * {
   * 	type,
   * 	size,
   * 	location,
   * 	pointer
   * }
   * @member {Object}
   */
  // next extract the attributes

  this.attributes = extractAttributes['default'](gl, this.program);
  this.uniformData = extractUniforms['default'](gl, this.program);
  /**
   * The uniforms of the shader as an object containing the following properties
   * {
   * 	gl,
   * 	data
   * }
   * @member {Object}
   */

  this.uniforms = generateUniformAccessObject['default'](gl, this.uniformData);
};
/**
 * Uses this shader
 */


Shader.prototype.bind = function () {
  this.gl.useProgram(this.program);
};
/**
 * Destroys this shader
 * TODO
 */


Shader.prototype.destroy = function () {
  this.attributes = null;
  this.uniformData = null;
  this.uniforms = null;
  var gl = this.gl;
  gl.deleteProgram(this.program);
};

var GLShader = Shader;

exports.__moduleExports = GLShader;
exports.default = GLShader;
